# AI Chat Messenger - UI компоненты

## Архитектура UI

### tkinter Framework
- **Основа**: tkinter (встроенный в Python)
- **Стилизация**: ttk (themed tkinter) для современного вида
- **Макет**: Grid и Pack layout managers
- **События**: Event-driven programming

### Структура UI
```
MainWindow
├── Sidebar (Frame)
│   ├── Chat List (Listbox)
│   ├── New Chat Button
│   └── Logout Button
└── Chat Area (Frame)
    └── ChatWidget
        ├── Messages Display (ScrolledText)
        ├── Input Area (Text)
        └── Action Buttons
```

## Основные компоненты

### MainWindow (gui/main_window.py)
```python
class MainWindow:
    """Главное окно приложения"""
    
    def __init__(self, config):
        self.root = tk.Tk()
        self.setup_window()
        self.create_widgets()
    
    def setup_window(self):
        """Настройка основного окна"""
        self.root.title("AI Chat Messenger")
        self.root.geometry("1200x800")
        self.root.minsize(800, 600)
        
        # Настройка grid weights
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=1)
```

**Основные функции:**
- Создание и управление главным окном
- Координация между компонентами
- Обработка аутентификации
- Управление чатами

### LoginDialog (gui/login_dialog.py)
```python
class LoginDialog:
    """Диалог аутентификации"""
    
    def __init__(self, parent, api_client):
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("Login / Register")
        self.dialog.geometry("400x300")
        self.dialog.resizable(False, False)
        self.dialog.transient(parent)
        self.dialog.grab_set()
```

**Основные функции:**
- Переключение между логином и регистрацией
- Валидация входных данных
- Интеграция с API клиентом
- Обработка ошибок аутентификации

### ChatWidget (gui/chat_widget.py)
```python
class ChatWidget:
    """Виджет чата"""
    
    def __init__(self, parent, api_client, screenshot_service):
        self.parent = parent
        self.api_client = api_client
        self.screenshot_service = screenshot_service
        self.create_widgets()
```

**Основные функции:**
- Отображение сообщений чата
- Ввод и отправка сообщений
- Интеграция с API для чата
- Управление скриншотами

## Виджеты и их управление

### ScrolledText для сообщений
```python
self.messages_text = scrolledtext.ScrolledText(
    chat_frame, 
    wrap=tk.WORD, 
    state=tk.DISABLED,
    font=("Arial", 10),
    bg="#f8f9fa",
    fg="#212529"
)

# Настройка тегов для стилизации
self.messages_text.tag_configure("user", foreground="#007bff", font=("Arial", 10, "bold"))
self.messages_text.tag_configure("assistant", foreground="#28a745", font=("Arial", 10, "bold"))
self.messages_text.tag_configure("timestamp", foreground="#6c757d", font=("Arial", 8))
```

### Text для ввода сообщений
```python
self.message_entry = tk.Text(
    input_frame, 
    height=3, 
    wrap=tk.WORD,
    font=("Arial", 10)
)

# Привязка событий
self.message_entry.bind('<Control-Return>', lambda e: self.send_message())
self.message_entry.bind('<Return>', lambda e: self.send_message() if not e.state & 0x4 else None)
```

### Listbox для списка чатов
```python
self.chat_listbox = tk.Listbox(list_frame)
chat_scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.chat_listbox.yview)
self.chat_listbox.configure(yscrollcommand=chat_scrollbar.set)

# Привязка событий
self.chat_listbox.bind('<Double-Button-1>', self.on_chat_selected)
```

## Диалоги и модальные окна

### ScreenshotDialog
```python
class ScreenshotDialog:
    """Диалог настроек скриншота"""
    
    def __init__(self, parent, screenshot_service, api_client, chat_widget):
        self.dialog = tk.Toplevel(parent)
        self.dialog.title("Screenshot Options")
        self.dialog.geometry("500x400")
        self.dialog.resizable(False, False)
        self.dialog.transient(parent)
        self.dialog.grab_set()
```

**Функциональность:**
- Выбор типа скриншота (полный экран/приложение)
- Ввод промпта для анализа
- Список запущенных приложений
- Кнопки действий

### Messagebox для уведомлений
```python
# Информационные сообщения
messagebox.showinfo("Success", "Operation completed successfully")

# Предупреждения
messagebox.showwarning("Warning", "This action cannot be undone")

# Ошибки
messagebox.showerror("Error", "An error occurred: " + str(error))

# Подтверждения
result = messagebox.askyesno("Confirm", "Are you sure you want to continue?")
```

## Навигация и состояние

### Управление состоянием
```python
class MainWindow:
    def __init__(self, config):
        # Состояние приложения
        self.is_authenticated = False
        self.current_chat_id = None
        self.messages = []
        
    def update_ui_state(self):
        """Обновление состояния UI"""
        if self.is_authenticated:
            self.show_chat_interface()
        else:
            self.show_login_dialog()
```

### Переключение между чатами
```python
def switch_to_chat(self, chat_id: str):
    """Переключение на другой чат"""
    self.current_chat_id = chat_id
    self.load_chat_messages(chat_id)
    self.update_chat_display()
```

### Создание новых чатов
```python
def create_new_chat(self):
    """Создание нового чата"""
    self.current_chat_id = f"chat_{int(time.time())}"
    self.chat_listbox.insert(tk.END, f"Chat {len(self.chat_listbox.get(0, tk.END)) + 1}")
    self.chat_widget.clear_chat()
```

## Стилизация и темы

### ttk стили
```python
import tkinter.ttk as ttk

# Создание стиля
style = ttk.Style()
style.theme_use('clam')  # Современная тема

# Настройка стилей
style.configure('Title.TLabel', font=('Arial', 16, 'bold'))
style.configure('Success.TButton', foreground='green')
style.configure('Error.TButton', foreground='red')
```

### Цветовая схема
```python
# Современная цветовая палитра
COLORS = {
    'primary': '#007bff',
    'success': '#28a745',
    'danger': '#dc3545',
    'warning': '#ffc107',
    'info': '#17a2b8',
    'light': '#f8f9fa',
    'dark': '#343a40',
    'muted': '#6c757d'
}

# Применение цветов
self.messages_text.configure(bg=COLORS['light'], fg=COLORS['dark'])
```

### Шрифты
```python
# Определение шрифтов
FONTS = {
    'default': ('Arial', 10),
    'title': ('Arial', 16, 'bold'),
    'small': ('Arial', 8),
    'monospace': ('Courier New', 10)
}

# Использование шрифтов
title_label = ttk.Label(main_frame, text="AI Chat Messenger", font=FONTS['title'])
```

## Обработка событий

### События клавиатуры
```python
def setup_keyboard_shortcuts(self):
    """Настройка горячих клавиш"""
    self.root.bind('<Control-n>', lambda e: self.create_new_chat())
    self.root.bind('<Control-l>', lambda e: self.logout())
    self.root.bind('<F5>', lambda e: self.refresh_chat())
    self.root.bind('<Escape>', lambda e: self.close_dialogs())
```

### События мыши
```python
def setup_mouse_events(self):
    """Настройка событий мыши"""
    self.chat_listbox.bind('<Button-1>', self.on_chat_click)
    self.chat_listbox.bind('<Double-Button-1>', self.on_chat_double_click)
    self.messages_text.bind('<Button-3>', self.show_context_menu)
```

### События окна
```python
def setup_window_events(self):
    """Настройка событий окна"""
    self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    self.root.bind('<Configure>', self.on_window_resize)
    self.root.bind('<FocusIn>', self.on_window_focus)
```

## Асинхронные операции

### Threading для UI
```python
import threading

def send_message_async(self, message: str):
    """Асинхронная отправка сообщения"""
    def _send():
        try:
            response = self.api_client.send_message(message)
            # Обновление UI в главном потоке
            self.root.after(0, lambda: self.update_chat(response))
        except Exception as e:
            self.root.after(0, lambda: self.show_error(str(e)))
    
    thread = threading.Thread(target=_send, daemon=True)
    thread.start()
```

### Прогресс-индикаторы
```python
def show_progress(self, message: str):
    """Показать индикатор прогресса"""
    self.progress_window = tk.Toplevel(self.root)
    self.progress_window.title("Processing...")
    self.progress_window.geometry("300x100")
    self.progress_window.resizable(False, False)
    
    ttk.Label(self.progress_window, text=message).pack(pady=20)
    
    # Прогресс-бар
    self.progress_bar = ttk.Progressbar(
        self.progress_window, 
        mode='indeterminate'
    )
    self.progress_bar.pack(pady=10, padx=20, fill='x')
    self.progress_bar.start()

def hide_progress(self):
    """Скрыть индикатор прогресса"""
    if hasattr(self, 'progress_window'):
        self.progress_window.destroy()
```

## Обработка ошибок UI

### Показ ошибок пользователю
```python
def show_error(self, error_message: str):
    """Показать ошибку пользователю"""
    messagebox.showerror("Error", f"An error occurred:\n{error_message}")
    self.logger.error(f"UI Error: {error_message}")

def show_warning(self, warning_message: str):
    """Показать предупреждение"""
    messagebox.showwarning("Warning", warning_message)
    self.logger.warning(f"UI Warning: {warning_message}")
```

### Валидация ввода
```python
def validate_message_input(self, message: str) -> bool:
    """Валидация ввода сообщения"""
    if not message or not message.strip():
        self.show_warning("Message cannot be empty")
        return False
    
    if len(message) > 4000:
        self.show_warning("Message is too long (max 4000 characters)")
        return False
    
    return True
```

## Адаптивность интерфейса

### Responsive layout
```python
def setup_responsive_layout(self):
    """Настройка адаптивного макета"""
    # Основные области
    self.root.grid_rowconfigure(0, weight=1)
    self.root.grid_columnconfigure(1, weight=1)
    
    # Боковая панель
    self.sidebar.grid_rowconfigure(1, weight=1)
    
    # Область чата
    self.chat_frame.grid_rowconfigure(0, weight=1)
    self.chat_frame.grid_columnconfigure(0, weight=1)
```

### Обработка изменения размера
```python
def on_window_resize(self, event):
    """Обработка изменения размера окна"""
    if event.widget == self.root:
        # Обновление макета при изменении размера
        self.update_layout()
```

## Заключение

tkinter предоставляет мощные возможности для создания современного GUI приложения. Следуйте этим принципам для создания интуитивного и отзывчивого интерфейса AI Chat Messenger.