# AI Chat Messenger - Архитектура проекта

## Обзор проекта
AI Chat Messenger - это кроссплатформенное приложение с AI-ассистентом, построенное на Python с модульной архитектурой MVC + Service-oriented.

## Структура проекта
```
ai_chat_messenger/
├── main.py                 # Главный файл приложения
├── simple_main.py          # Упрощенная тестовая версия
├── requirements.txt        # Python зависимости
├── config.ini             # Конфигурация (автосоздается)
├── gui/                   # GUI компоненты
│   ├── main_window.py     # Главное окно приложения
│   ├── login_dialog.py    # Диалог аутентификации
│   └── chat_widget.py     # Виджет чата
├── services/              # Бизнес-логика и сервисы
│   ├── api_client.py      # HTTP клиент для API
│   └── screenshot.py      # Сервис скриншотов
├── utils/                 # Утилиты
│   └── config.py          # Управление конфигурацией
├── config/                # Файлы конфигурации
│   └── auth_token.json    # Сохраненный токен аутентификации
├── logs/                  # Логи приложения
└── screenshots/           # Сохраненные скриншоты
```

## Технологический стек
- **Язык**: Python 3.8+
- **UI Framework**: tkinter (встроенный)
- **HTTP клиент**: requests + httpx
- **Обработка изображений**: PIL/Pillow
- **Скриншоты**: mss (быстрый захват экрана)
- **Процессы**: psutil (работа с приложениями)
- **Windows API**: pywin32 (для работы с окнами)
- **Конфигурация**: configparser (встроенный)
- **Логирование**: logging (встроенный)

## Основные компоненты

### GUI модули (gui/)
- **main_window.py** - Главное окно приложения с боковой панелью чатов
- **login_dialog.py** - Диалог аутентификации (логин/регистрация)
- **chat_widget.py** - Виджет чата с сообщениями и вводом

### Services модули (services/)
- **api_client.py** - HTTP клиент для работы с YourSmartScreen API
- **screenshot.py** - Сервис захвата скриншотов и работы с приложениями

### Utils модули (utils/)
- **config.py** - Управление конфигурацией через config.ini

## Паттерны проектирования

### MVC (Model-View-Controller)
- **Model**: services/ (бизнес-логика и данные)
- **View**: gui/ (пользовательский интерфейс)
- **Controller**: main_window.py (координация между Model и View)

### Service-oriented Architecture
- **APIClient** - работа с внешним API
- **ScreenshotService** - захват и обработка скриншотов
- **Config** - управление настройками

### Observer Pattern
- GUI компоненты реагируют на изменения состояния
- Асинхронные операции через threading

## Основные функции

### 1. Аутентификация
- Регистрация новых пользователей
- Вход в систему
- Сохранение токена аутентификации
- Автоматический вход при следующем запуске

### 2. AI Чат
- Отправка сообщений в AI
- Получение ответов от AI
- Сохранение контекста диалога
- Управление несколькими чатами

### 3. Анализ скриншотов
- Захват полного экрана
- Захват конкретного приложения
- Выбор промпта для анализа
- Отправка изображения в AI для анализа

### 4. Управление чатами
- Создание новых чатов
- Переключение между чатами
- История сообщений
- Очистка чатов

## Архитектурные принципы

### Модульность
- Каждый модуль имеет четко определенную ответственность
- Слабая связанность между модулями
- Высокая когезия внутри модулей

### Расширяемость
- Легко добавлять новые GUI компоненты
- Простое расширение функциональности API
- Гибкая система конфигурации

### Тестируемость
- Сервисы изолированы и легко тестируются
- GUI компоненты отделены от бизнес-логики
- Конфигурация вынесена в отдельные файлы

### Производительность
- Асинхронные операции через threading
- Быстрый захват экрана через mss
- Эффективная работа с изображениями через PIL

## Потоки данных

### 1. Аутентификация
```
LoginDialog → APIClient → YourSmartScreen API → Token → Config
```

### 2. Отправка сообщения
```
ChatWidget → APIClient → YourSmartScreen API → Response → ChatWidget
```

### 3. Анализ скриншота
```
ScreenshotDialog → ScreenshotService → Image File → APIClient → YourSmartScreen API → Analysis → ChatWidget
```

## Конфигурация

### config.ini
- **api**: настройки API (URL, таймауты)
- **gui**: настройки интерфейса (размеры, темы)
- **screenshots**: настройки скриншотов (качество, формат)
- **logging**: настройки логирования (уровень, файлы)

### auth_token.json
- Сохраненный JWT токен аутентификации
- Автоматическое обновление при входе
- Безопасное хранение в config/ директории

## Логирование

### Уровни логирования
- **INFO**: общая информация о работе приложения
- **ERROR**: ошибки и исключения
- **DEBUG**: детальная отладочная информация

### Файлы логов
- **logs/ai_chat_messenger.log** - основной лог приложения
- Ротация логов по размеру и времени
- Настраиваемые уровни через config.ini

## Безопасность

### Аутентификация
- JWT токены для API аутентификации
- Безопасное хранение токенов
- Автоматическое обновление токенов

### Данные
- Локальное хранение только необходимых данных
- Шифрование чувствительной информации
- Очистка временных файлов

## Производительность

### Оптимизации
- Асинхронные HTTP запросы
- Быстрый захват экрана через mss
- Эффективная обработка изображений
- Кэширование конфигурации

### Мониторинг
- Логирование производительности
- Отслеживание ошибок
- Метрики использования функций